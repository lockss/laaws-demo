#!/bin/bash

# Copyright (c) 2000-2018, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

##
## function Check_Docker
##
Check_Docker()
{
  if ! docker info &> /dev/null ; then
    echo "$(basename "${0}"): Docker is not running"
    exit 1
  fi
}

##
## function Check_Installed
##
Check_Installed()
{
  EXE="${1}"
  if ! which "${EXE}" &> /dev/null ; then
    echo "$(basename "${0}"): ${EXE} not on the PATH (${PATH})"
    exit 1
  fi
}

##
## function Get_Artifact
##
Get_Artifact()
{
  local GROUP="${1}"
  local ARTIFACT="${2}"
  local VERSION="${3}"
  local ARTSTR="${GROUP}:${ARTIFACT}:${VERSION}"
  local REPO=''
  case "${VERSION}" in
    *-SNAPSHOT)
      REPO="${SNAPSHOTS}"
      ;;
    *)
      REPO="${RELEASES}"
      ;;
  esac
  if [ "X${MVN_OFFLINE}" != "Xtrue" ]; then
    mvn dependency:get "-Dartifact=${ARTSTR}" "-DremoteRepositories=${REPO}" -Dtransitive=false
  fi
  mvn dependency:copy "-Dartifact=${ARTSTR}" "-DoutputDirectory=${JARDIR}" -Dmdep.useBaseVersion=true
}

##
## function Print_Usage
##
Print_Usage()
{
  echo "Usage: $(basename "${0}") [-offline|-o] [-sleep|-s N] [-help|-h]"
  cat <<'END_OF_STRING'

    -help, -h     Print this message and exit
    -offline, -o  Skip Maven operations that would go online
    -sleep, -s N  Set sleep interval to N seconds (default 30)
END_OF_STRING
}

##
## function Wait_For_200
##
Wait_For_200()
{
  local HOST="${1}"
  local PORT="${2}"
  local URL="http://${HOST}:${PORT}/status"
  while true ; do
    echo -n "Waiting for ${URL} ... " && curl --silent --fail --output /dev/null "${URL}" && echo "succeeded" && break
    echo "failed" && sleep $SLEEP
  done
}

##
## Definitions
##

CONFIGDIR="$(dirname "${0}")/../config"
SNAPSHOTS='https://oss.sonatype.org/content/repositories/snapshots'
RELEASES='https://repo.maven.apache.org/maven2'
JARDIR='download'
SLEEP='30'
MVN_OFFLINE='false'

##
## Source plain.sh and common.sh 
##
set -a
source "${CONFIGDIR}/conf/plain.sh"
source "${CONFIGDIR}/conf/common.sh"
set +a

##
## Option parsing loop
##
while true ; do
  case "${1}" in
    -h|-help|--help)
      Print_Usage
      exit 0
      ;;
    -o|-offline|--offline)
      MVN_OFFLINE=true
      shift; continue
      ;;
    -s|-sleep|--sleep)
      SLEEP="${2}"
      shift; shift; continue
      ;;
    -*)
      echo "$(basename "${0}"): unknown option: ${1}"
      exit 1
      ;;
  esac
  break
done

##
## Preliminary checks and actions 
##

# Check that dependent programs are installed
Check_Installed 'curl'
Check_Installed 'docker'
Check_Installed 'mvn'

# Check that Docker is running
Check_Docker

# Make $JARDIR if necessary
if [ ! -d "${JARDIR}" ]; then
  mkdir "${JARDIR}"
fi

# Update Maven artifacts

Get_Artifact "${CFG_GRP}" "${CFG_ART}" "${CFG_VERSION}"
Get_Artifact "${MDQ_GRP}" "${MDQ_ART}" "${MDQ_VERSION}"
Get_Artifact "${MDX_GRP}" "${MDX_ART}" "${MDX_VERSION}"
Get_Artifact "${POL_GRP}" "${POL_ART}" "${POL_VERSION}"
Get_Artifact "${REPO_GRP}" "${REPO_ART}" "${REPO_VERSION}"

##
## Start components
##

java -jar "${JARDIR}/${CFG_ART}-${CFG_VERSION}.jar" ${CFG_CMD} &
echo "$!" > "${CFG_ART}.pid"
Wait_For_200 "${CFG_HOST}" "${CFG_PORT}"

docker-compose up --detach lockss-metadata-pgsql laaws-demo-solr laaws-demo-hdfs laaws-openwayback laaws-edina-indexer
sleep $SLEEP

java -jar "${JARDIR}/${REPO_ART}-${REPO_VERSION}.jar" ${REPO_CMD} &
echo "$!" > "${REPO_ART}.pid"
java -jar "${JARDIR}/${MDQ_ART}-${MDQ_VERSION}.jar" ${MDQ_CMD} &
echo "$!" > "${MDQ_ART}.pid"
Wait_For_200 "${MDQ_HOST}" "${MDQ_PORT}"

java -jar "${JARDIR}/${MDX_ART}-${MDX_VERSION}.jar" ${MDX_CMD} &
echo "$!" > "${MDX_ART}.pid"
java -jar "${JARDIR}/${POL_ART}-${POL_VERSION}.jar" ${POL_CMD} &
echo "$!" > "${POL_ART}.pid"
